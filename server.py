from flask import Flask, request, jsonify
import os
import json
import time
from threading import Lock

app = Flask(__name__)

# L∆∞u t√≠n hi·ªáu cu·ªëi c√πng trong RAM + lock ƒë·ªÉ thread-safe
_last_signal = {}
_lock = Lock()

def _now_iso():
    return time.strftime("%Y-%m-%dT%H:%M:%SZ", time.gmtime())

def _normalize_signal(obj):
    """
    Chu·∫©n ho√° t√≠n hi·ªáu v·ªÅ d·∫°ng:
    {
      "symbol": "XAUUSDm",
      "action": "buy" | "sell" | "close_all",
      "lot": float (optional),
      "price": float|str (optional),
      "time": "ISO-8601" (server s·∫Ω b·ªï sung n·∫øu thi·∫øu)
    }
    """
    if not isinstance(obj, dict):
        return None

    # ch·∫•p nh·∫≠n "signal" ho·∫∑c "action"
    action = obj.get("action") or obj.get("signal")
    if not action or not isinstance(action, str):
        return None
    action = action.lower().strip()

    # c√°c action h·ª£p l·ªá
    if action not in ("buy", "sell", "close_all"):
        return None

    symbol = obj.get("symbol") or obj.get("sym") or ""
    symbol = str(symbol).strip()

    lot = obj.get("lot")
    try:
        lot = float(lot) if lot is not None else None
    except Exception:
        lot = None

    price = obj.get("price")
    # price c√≥ th·ªÉ l√† s·ªë ho·∫∑c chu·ªói (v√≠ d·ª• "{{close}}")
    if price is not None:
        try:
            price = float(price)
        except Exception:
            price = str(price)

    when = obj.get("time")
    if not when:
        when = _now_iso()

    out = {
        "symbol": symbol,
        "action": action,
        "time": when
    }
    if lot is not None:
        out["lot"] = lot
    if price is not None:
        out["price"] = price
    return out

def _extract_payload(req_json):
    """
    H·ªó tr·ª£ c·∫£ 2 ki·ªÉu TradingView g·ª≠i:
    1) JSON tr·ª±c ti·∫øp: { "symbol":"...", "action":"buy", ... }
    2) JSON n·∫±m trong tr∆∞·ªùng "message": { "message":"{...json...}" }
    """
    if isinstance(req_json, dict):
        # TH1: JSON tr·ª±c ti·∫øp
        sig = _normalize_signal(req_json)
        if sig:
            return sig

        # TH2: JSON l·ªìng trong "message"
        msg = req_json.get("message")
        if isinstance(msg, str):
            msg = msg.strip()
            # th·ª≠ parse JSON trong message
            try:
                inner = json.loads(msg)
                sig = _normalize_signal(inner)
                if sig:
                    return sig
            except Exception:
                pass

    # kh√¥ng nh·∫≠n di·ªán ƒë∆∞·ª£c
    return None

@app.route("/")
def home():
    return "TradingView Webhook Server is running ‚úÖ", 200

@app.route("/webhook", methods=["POST"])
def webhook():
    # nh·∫≠n JSON (silent ƒë·ªÉ kh√¥ng raise n·∫øu sai header)
    data = request.get_json(silent=True)
    sig = _extract_payload(data)

    if not sig:
        return jsonify({
            "status": "error",
            "message": "Invalid payload. Expect JSON with fields like symbol/action/lot/price/time or a 'message' containing JSON."
        }), 400

    with _lock:
        global _last_signal
        _last_signal = sig

    print("üì© Received signal:", sig)
    return jsonify({"status": "success", "message": "Signal received", "data": sig}), 200

@app.route("/signals", methods=["GET"])
def get_signals():
    with _lock:
        if not _last_signal:
            return jsonify({"status": "empty"}), 200
        # tr·∫£ v·ªÅ signal hi·ªán c√≥
        return jsonify(_last_signal), 200

@app.route("/clear", methods=["POST"])
def clear_signal():
    with _lock:
        global _last_signal
        _last_signal = {}
    return jsonify({"status": "cleared"}), 200

if __name__ == "__main__":
    # Render s·∫Ω set PORT; khi ch·∫°y local th√¨ d√πng 10000
    port = int(os.environ.get("PORT", 10000))
    # host 0.0.0.0 ƒë·ªÉ Render/public truy c·∫≠p ƒë∆∞·ª£c
    app.run(host="0.0.0.0", port=port)
